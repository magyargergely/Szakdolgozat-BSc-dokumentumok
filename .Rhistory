prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
# Calculate evaluation metrics
accuracy <- sum(df$label == df$spam) / nrow(df)
precision <- sum(df$spam == "spam" & df$label == "spam") / sum(df$spam == "spam")
recall <- sum(df$spam == "spam" & df$label == "spam") / sum(df$label == "spam")
# Calculate true positives (TP), true negatives (TN), false positives (FP), and false negatives (FN)
tp <- sum(df$spam == "spam" & df$label == "spam")
tn <- (sum(df$spam == "not spam" & df$label == "not spam")-tp)
fp <- sum(df$spam == "spam" & df$label == "not spam")
fn <- sum(df$spam == "not spam" & df$label == "spam")
# Calculate specificity, handling zero denominators
if (tn + fp > 0) {
specificity <- tn / (tn + fp)
} else {
specificity <- 0
}
# Step 3: Create new dataframe
eval_df <- data.frame(Prefix = prefix, RowName = row_name, Accuracy = accuracy, Precision = precision, Recall = recall, Specificity = specificity)
# Step 4: Append to results
results[[prefix]] <- eval_df
}
# Combine all dataframes into a single dataframe
result_df <- bind_rows(results)
View(result_df)
# Step 1: Initialize empty list
results <- list()
# Step 2: Loop through dataframes
for (df_name in ls(pattern = "^\\d{2}_")) {
# Load the dataframe
df <- get(df_name)
# Extract prefix and part after prefix
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
# Calculate evaluation metrics
accuracy <- sum(df$label == df$spam) / nrow(df)
precision <- sum(df$spam == "spam" & df$label == "spam") / sum(df$spam == "spam")
recall <- sum(df$spam == "spam" & df$label == "spam") / sum(df$label == "spam")
# Calculate true positives (TP), true negatives (TN), false positives (FP), and false negatives (FN)
tp <- sum(df$spam == "spam" & df$label == "spam")
tn <- sum(df$spam == "not spam" & df$label == "not spam")-fp
fp <- sum(df$spam == "spam" & df$label == "not spam")
fn <- sum(df$spam == "not spam" & df$label == "spam")
# Calculate specificity, handling zero denominators
if (tn + fp > 0) {
specificity <- tp / (tn + fp)
} else {
specificity <- 0
}
# Step 3: Create new dataframe
eval_df <- data.frame(Prefix = prefix, RowName = row_name, Accuracy = accuracy, Precision = precision, Recall = recall, Specificity = specificity)
# Step 4: Append to results
results[[prefix]] <- eval_df
}
# Combine all dataframes into a single dataframe
result_df <- bind_rows(results)
View(result_df)
# Step 1: Initialize empty list
results <- list()
# Step 2: Loop through dataframes
for (df_name in ls(pattern = "^\\d{2}_")) {
# Load the dataframe
df <- get(df_name)
# Extract prefix and part after prefix
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
# Calculate evaluation metrics
accuracy <- sum(df$label == df$spam) / nrow(df)
precision <- sum(df$spam == "spam" & df$label == "spam") / sum(df$spam == "spam")
recall <- sum(df$spam == "spam" & df$label == "spam") / sum(df$label == "spam")
# Step 3: Create new dataframe
eval_df <- data.frame(Prefix = prefix, RowName = row_name, Accuracy = accuracy, Precision = precision, Recall = recall)
# Step 4: Append to results
results[[prefix]] <- eval_df
}
# Combine all dataframes into a single dataframe
result_df <- bind_rows(results)
View(result_df)
# Step 1: Initialize empty list
results <- list()
# Step 2: Loop through dataframes
for (df_name in ls(pattern = "^\\d{2}_")) {
# Load the dataframe
df <- get(df_name)
# Extract prefix and part after prefix
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
# Calculate evaluation metrics
accuracy <- sum(df$label == df$spam) / nrow(df)
precision <- sum(df$spam == "spam" & df$label == "spam") / sum(df$spam == "spam")
recall <- sum(df$spam == "spam" & df$label == "spam") / sum(df$label == "spam")
# Step 3: Create new dataframe
eval_df <- data.frame(Name = row_name, Accuracy = accuracy, Precision = precision, Recall = recall)
# Step 4: Append to results
results[[prefix]] <- eval_df
}
# Combine all dataframes into a single dataframe
result_df <- bind_rows(results)
accuracy_pelda <- `01_Fekete Példa János` %>% sum(label == spam) / nrow()
View(`01_Fekete Példa János`)
accuracy_pelda <- `01_Fekete Példa János` %>% sum(`01_Fekete Példa János`$label == `01_Fekete Példa János`$spam) / nrow()
accuracy_pelda <- `01_Fekete Példa János`
accuracy_pelda <- sum(`01_Fekete Példa János`$label == `01_Fekete Példa János`$spam)/nrow(`01_Fekete Példa János`)
accuracy_pelda <- sum(`01_Fekete Példa János`$label == `01_Fekete Példa János`$spam)/nrow(`01_Fekete Példa János`)
tp <- sum(`01_Fekete Példa János`$spam == "spam" & `01_Fekete Példa János`$label == "spam")
fp <- sum(`01_Fekete Példa János`$spam == "spam" & `01_Fekete Példa János`$label == "not spam")
tn <- sum(`01_Fekete Példa János`$spam == "not spam" & `01_Fekete Példa János`$label == "not spam") - fp
fn <- sum(`01_Fekete Példa János`$spam == "not spam" & `01_Fekete Példa János`$label == "spam")
accuracy_masik <- (tp+tn)/(tp+fp+tn+fn)
tp <- sum(`01_Fekete Példa János`$spam == "spam" & `01_Fekete Példa János`$label == "spam")
fp <- sum(`01_Fekete Példa János`$spam == "spam" & `01_Fekete Példa János`$label == "not spam")
tn <- sum(`01_Fekete Példa János`$spam == "not spam" & `01_Fekete Példa János`$label == "not spam")
fn <- sum(`01_Fekete Példa János`$spam == "not spam" & `01_Fekete Példa János`$label == "spam")
accuracy_masik <- (tp+tn)/(tp+fp+tn+fn)
tp <- sum(`01_Fekete Példa János`$spam == "spam" & `01_Fekete Példa János`$label == "spam")
fp <- sum(`01_Fekete Példa János`$spam == "spam" & `01_Fekete Példa János`$label == "not spam")
tn <- sum(`01_Fekete Példa János`$spam == "not spam" & `01_Fekete Példa János`$label == "not spam")
fn <- sum(`01_Fekete Példa János`$spam == "not spam" & `01_Fekete Példa János`$label == "spam")
accuracy_pelda <- sum(`01_Fekete Példa János`$label == `01_Fekete Példa János`$spam)/nrow(`01_Fekete Példa János`)
accuracy_masik <- (tp+tn)/(tp+fp+tn+fn)
results <- list()
for (df_name in ls(pattern = "^\\d{2}_")) {
df <- get(df_name)
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not spam")
tn <- sum(df$spam == "not spam" & df$label == "not spam")
fn <- sum(df$spam == "not spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
eval_df <- data.frame(Name = row_name, Accuracy = accuracy, Precision = precision, Recall = recall, Specificity = specificity)
results[[prefix]] <- eval_df
}
result_df <- bind_rows(results)
df <- `01_Fekete Példa János`
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not spam")
tn <- sum(df$spam == "not spam" & df$label == "not spam")
fn <- sum(df$spam == "not spam" & df$label == "spam")
tp <- sum(df$spam == "spam", df$label == "spam")
tp <- count(df$spam == "spam" & df$label == "spam")
View(`01_Fekete Példa János`)
df <- `01_Fekete Példa János`
View(df)
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not spam" & df$label == "not_spam")
fn <- sum(df$spam == "not spam" & df$label == "spam")
class(fp)
fp+tp
fp
df <- `01_Fekete Példa János`
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not spam" & df$label == "not_spam")
fn <- sum(df$spam == "not spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
results <- list()
for (df_name in ls(pattern = "^\\d{2}_")) {
df <- get(df_name)
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
eval_df <- data.frame(Name = row_name, Accuracy = accuracy, Precision = precision, Recall = recall, Specificity = specificity)
results[[prefix]] <- eval_df
}
result_df <- bind_rows(results)
df <- `01_Fekete Példa János`
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not spam" & df$label == "not_spam")
fn <- sum(df$spam == "not spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
df <- `01_Fekete Példa János`
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
rm(list = ls())
function (x, df1, df2, ncp, log = FALSE)
set.seed(2023)
rm(list = ls())
set.seed(2023)
email_newdata_no_labels <- read.csv("email_newdata_no_labels.csv")
# 200 adatpont kiválasztásának leszimulálása
email_newdata_no_labels <- email_newdata_no_labels[sample(nrow(email_newdata_no_labels),200), ]
dir_students <- "./beolvasas_proba"
assign_spam <- function(df) {
df %>%
mutate(spam = sample(c("spam", "not_spam"), size = nrow(df), replace = TRUE))
}
folders <- list.dirs(dir_students, recursive = FALSE)
for (folder in folders) {
student_data <- email_newdata_no_labels %>%
assign_spam() %>%
write_csv(file.path(folder, "email_newdata_with_spam.csv"))
}
rm(list = ls())
set.seed(2023)
# A fileokat tartalmazó subfolderek elérési útja
dir_students <- "./beolvasas_proba/"
# A subfolderek neveinek listába gyűjtése
subfolders <- list.dirs(dir_students, recursive = FALSE)
# A hallgató nevének hozzárendelése a data frame-hez
assign(df_name, df)
# Az ellenőrző adattábla betöltése
email_newdata_labels <- read.csv("email_newdata_labels.csv")
email_newdata_labels <- email_newdata_labels %>% rename("label" = "spam")
# Az ellenőrző adattábla összekapcsolása a betöltött .csv fileokkal
df_list <- ls(pattern = "^\\d+_")
for (df_name in df_list) {
df <- get(df_name)
df <- merge(df, email_newdata_labels[, c("ID", "label")], by = "ID")
assign(df_name, df)
}
# A fileokat tartalmazó subfolderek elérési útja
dir_students <- "./beolvasas_proba/"
# A subfolderek neveinek listába gyűjtése
subfolders <- list.dirs(dir_students, recursive = FALSE)
# Végigmegy az összes subfolderen, és kiírja a CSV fileok tartalmát külön data framekbe
for (i in seq_along(subfolders)) {
# A hallgatók neveinek kiszedése külön változóba
example_name <- sub("_.*$", "", basename(subfolders[i]))
prefix <- sprintf("%02d", i)
df_name <- paste0(prefix, "_", example_name)
# A mappán belüli CSV file elérési útja
csv_file_path <- file.path(subfolders[i], dir(subfolders[i], pattern = "*.csv"))
# CSV file beolvasása data frame-be
df <- read.csv(csv_file_path)
# A hallgató nevének hozzárendelése a data frame-hez
assign(df_name, df)
}
# A fileokat tartalmazó subfolderek elérési útja
dir_students <- "./beolvasas_proba/"
rm(list = ls())
set.seed(2023)
email_newdata_no_labels <- read.csv("email_newdata_no_labels.csv")
# 200 adatpont kiválasztásának leszimulálása
email_newdata_no_labels <- email_newdata_no_labels[sample(nrow(email_newdata_no_labels),200), ]
dir_students <- "./beolvasas_proba"
assign_spam <- function(df) {
df %>%
mutate(spam = sample(c("spam", "not_spam"), size = nrow(df), replace = TRUE))
}
folders <- list.dirs(dir_students, recursive = FALSE)
for (folder in folders) {
student_data <- email_newdata_no_labels %>%
assign_spam() %>%
write_csv(file.path(folder, "email_newdata_with_spam.csv"))
}
rm(list = ls())
set.seed(2023)
# A fileokat tartalmazó subfolderek elérési útja
dir_students <- "./beolvasas_proba/"
# A subfolderek neveinek listába gyűjtése
subfolders <- list.dirs(dir_students, recursive = FALSE)
# Végigmegy az összes subfolderen, és kiírja a CSV fileok tartalmát külön data framekbe
for (i in seq_along(subfolders)) {
# A hallgatók neveinek kiszedése külön változóba
example_name <- sub("_.*$", "", basename(subfolders[i]))
prefix <- sprintf("%02d", i)
df_name <- paste0(prefix, "_", example_name)
# A mappán belüli CSV file elérési útja
csv_file_path <- file.path(subfolders[i], dir(subfolders[i], pattern = "*.csv"))
# CSV file beolvasása data frame-be
df <- read.csv(csv_file_path)
# A hallgató nevének hozzárendelése a data frame-hez
assign(df_name, df)
}
# A fileokat tartalmazó subfolderek elérési útja
dir_students <- "./beolvasas_proba/"
# A subfolderek neveinek listába gyűjtése
subfolders <- list.dirs(dir_students, recursive = FALSE)
# Végigmegy az összes subfolderen, és kiírja a CSV fileok tartalmát külön data framekbe
for (i in seq_along(subfolders)) {
# A hallgatók neveinek kiszedése külön változóba
example_name <- sub("_.*$", "", basename(subfolders[i]))
prefix <- sprintf("%02d", i)
df_name <- paste0(prefix, "_", example_name)
# A mappán belüli CSV file elérési útja
csv_file_path <- file.path(subfolders[i], dir(subfolders[i], pattern = "*.csv"))
# CSV file beolvasása data frame-be
df <- read.csv(csv_file_path)
# A hallgató nevének hozzárendelése a data frame-hez
assign(df_name, df)
}
email_newdata_no_labels <- read.csv("email_newdata_no_labels.csv")
# 200 adatpont kiválasztásának leszimulálása
email_newdata_no_labels <- email_newdata_no_labels[sample(nrow(email_newdata_no_labels),200), ]
dir_students <- "./beolvasas_proba"
assign_spam <- function(df) {
df %>%
mutate(spam = sample(c("spam", "not_spam"), size = nrow(df), replace = TRUE))
}
folders <- list.dirs(dir_students, recursive = FALSE)
for (folder in folders) {
student_data <- email_newdata_no_labels %>%
assign_spam() %>%
write_csv(file.path(folder, "email_newdata_with_spam.csv"))
}
# A fileokat tartalmazó subfolderek elérési útja
dir_students <- "./beolvasas_proba/"
# A subfolderek neveinek listába gyűjtése
subfolders <- list.dirs(dir_students, recursive = FALSE)
subfolders
# Végigmegy az összes subfolderen, és kiírja a CSV fileok tartalmát külön data framekbe
for (i in seq_along(subfolders)) {
# A hallgatók neveinek kiszedése külön változóba
example_name <- sub("_.*$", "", basename(subfolders[i]))
prefix <- sprintf("%02d", i)
df_name <- paste0(prefix, "_", example_name)
# A mappán belüli CSV file elérési útja
csv_file_path <- file.path(subfolders[i], dir(subfolders[i], pattern = "*.csv"))
# CSV file beolvasása data frame-be
df <- read.csv(csv_file_path)
# A hallgató nevének hozzárendelése a data frame-hez
assign(df_name, df)
}
# A hallgatók neveinek kiszedése külön változóba
example_name <- sub("_.*$", "", basename(subfolders[1]))
prefix <- sprintf("%02d", i)
df_name <- paste0(prefix, "_", example_name)
# A mappán belüli CSV file elérési útja
csv_file_path <- file.path(subfolders[1], dir(subfolders[1], pattern = "*.csv"))
# CSV file beolvasása data frame-be
df <- read.csv(csv_file_path)
csv_file_path
# Végigmegy az összes subfolderen, és kiírja a CSV fileok tartalmát külön data framekbe
for (i in seq_along(subfolders)) {
# A hallgatók neveinek kiszedése külön változóba
example_name <- sub("_.*$", "", basename(subfolders[i]))
prefix <- sprintf("%02d", i)
df_name <- paste0(prefix, "_", example_name)
# A mappán belüli CSV file elérési útja
csv_file_path <- file.path(subfolders[i], dir(subfolders[i], pattern = "*.csv"))
# CSV file beolvasása data frame-be
df <- read.csv(csv_file_path)
# A hallgató nevének hozzárendelése a data frame-hez
assign(df_name, df)
}
# Az ellenőrző adattábla betöltése
email_newdata_labels <- read.csv("email_newdata_labels.csv")
email_newdata_labels <- email_newdata_labels %>% rename("label" = "spam")
# Az ellenőrző adattábla összekapcsolása a betöltött .csv fileokkal
df_list <- ls(pattern = "^\\d+_")
for (df_name in df_list) {
df <- get(df_name)
df <- merge(df, email_newdata_labels[, c("ID", "label")], by = "ID")
assign(df_name, df)
}
df <- `01_Fekete Példa János`
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
df <- `01_Fekete Példa János`
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
specificity <- tp / (tn + fp)
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
results <- list()
for (df_name in ls(pattern = "^\\d{2}_")) {
df <- get(df_name)
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
eval_df <- data.frame(Name = row_name, Accuracy = accuracy, Precision = precision, Recall = recall, Specificity = specificity)
results[[prefix]] <- eval_df
}
result_df <- bind_rows(results)
View(result_df)
df <- `01_Fekete Példa János`
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")-fp
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
results <- list()
for (df_name in ls(pattern = "^\\d{2}_")) {
df <- get(df_name)
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tp / (tn + fp)
eval_df <- data.frame(Name = row_name, Accuracy = accuracy, Precision = precision, Recall = recall, Specificity = specificity)
results[[prefix]] <- eval_df
}
result_df <- bind_rows(results)
df <- `01_Fekete Példa János`
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tn / (tn + fp)
results <- list()
for (df_name in ls(pattern = "^\\d{2}_")) {
df <- get(df_name)
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tn / (tn + fp)
eval_df <- data.frame(Name = row_name, Accuracy = accuracy, Precision = precision, Recall = recall, Specificity = specificity)
results[[prefix]] <- eval_df
}
result_df <- bind_rows(results)
rm(list = ls())
set.seed(2023)
# A fileokat tartalmazó subfolderek elérési útja
dir_students <- "./beolvasas_proba/"
# A subfolderek neveinek listába gyűjtése
subfolders <- list.dirs(dir_students, recursive = FALSE)
# Végigmegy az összes subfolderen, és kiírja a CSV fileok tartalmát külön data framekbe
for (i in seq_along(subfolders)) {
# A hallgatók neveinek kiszedése külön változóba
example_name <- sub("_.*$", "", basename(subfolders[i]))
prefix <- sprintf("%02d", i)
df_name <- paste0(prefix, "_", example_name)
# A mappán belüli CSV file elérési útja
csv_file_path <- file.path(subfolders[i], dir(subfolders[i], pattern = "*.csv"))
# CSV file beolvasása data frame-be
df <- read.csv(csv_file_path)
# A hallgató nevének hozzárendelése a data frame-hez
assign(df_name, df)
}
# Az ellenőrző adattábla betöltése
email_newdata_labels <- read.csv("email_newdata_labels.csv")
email_newdata_labels <- email_newdata_labels %>% rename("label" = "spam")
# Az ellenőrző adattábla összekapcsolása a betöltött .csv fileokkal
df_list <- ls(pattern = "^\\d+_")
for (df_name in df_list) {
df <- get(df_name)
df <- merge(df, email_newdata_labels[, c("ID", "label")], by = "ID")
assign(df_name, df)
}
results <- list()
for (df_name in ls(pattern = "^\\d{2}_")) {
df <- get(df_name)
prefix <- substr(df_name, 1, 2)
row_name <- substr(df_name, 4, nchar(df_name))
tp <- sum(df$spam == "spam" & df$label == "spam")
fp <- sum(df$spam == "spam" & df$label == "not_spam")
tn <- sum(df$spam == "not_spam" & df$label == "not_spam")
fn <- sum(df$spam == "not_spam" & df$label == "spam")
accuracy <- (tp + tn)/(tp + fp + fn + tn)
precision <- tp / (tp + fp)
recall <- tp / (tp + fn)
specificity <- tn / (tn + fp)
eval_df <- data.frame(Name = row_name, Accuracy = accuracy, Precision = precision, Recall = recall, Specificity = specificity)
results[[prefix]] <- eval_df
}
result_df <- bind_rows(results)
View(result_df)
evaluation_df <- bind_rows(results)
View(evaluation_df)
View(evaluation_df)
